package org.freenesis.airplay.jap2lib;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

class SapHashTest {

    private final SapHash sapHash = new SapHash();

    @Test
    void sapHash1Test() {
        byte[] base = {-6, -100, -83, 77, 75, 104, 38, -116, 127, -13, -120, -103, -34, -110, 46, -107, 30, 0, 1, 30, -125, 126, 116, 70, 103, -73, -27, 121, -8, 114, 3, 1, -121, -45, -63, 15, 43, -41, 99, -50, 92, -84, 43, 121, -76, 55, -51, -97, 5, -32, -7, -68, 100, 108, -14, 29, 86, 64, -60, 37, -93, -125, -111, 113, -55, -25, 98, -103, -49, 98, -55, 82, 124, 29, 52, -57, -3, 12, 58, -42, -121, 115, -63, 99, 90, 126, -108, 28, -48, -9, -19, -94, 72, 6, 99, -48, -78, -113, 35, -5, -47, -114, 63, -36, 66, -126, -32, -93, -99, -29, 111, 57, -106, -45, 126, -1, 112, 28, -83, 46, -74, -87, -118, -108, 112, 71, -112, 100, -80, -83, 20, 79, -94, 8, 111, 16, -1, -65, -36, -17, 69, -70, 120, 121, 8, 0, 1, -52, 52, 42, 94, 91, 26, 103, 115, -62, 14, 33, -72, 34, 77, -8, 98, 72, 24, 100, -17, -127, 10, -82, 46, 55, 3, -56, -127, -100, 35, 83, -99, -27, -11, -41, 73, -68, 91, 122, 38, 108, 73, 98, -125, -50, 127, 3, -109, 122, -31, -10, 22, -34, 12, 21, -1, 51, -116, -54, -1, -80, -98, -86, -69, -28, 15, 93, 95, 85, -113, -71, 127, 23, 49, -8, -9, -38, 96, -96, -20, 101, 121, -61, 62, -87, -125, 18, -61, -74, 113, 53, -90, 105, 79, -8, 35, 5, -39, -70, 92, 97, 95, -94, 84, -46, -79, -125, 69, -125, -50, -28, 45, 68, 38, -56, 53, -89, -91, -10, -56, 66, 28, 13, -93, -15, -57, -20, 78, 39, 94, -3, -14, -24, 48, -105, -82, 112, -5, -32, 0, 63, 28, 57, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0};
        byte[] sessionKey = new byte[16];

        sapHash.sap_hash(base, sessionKey);

        assertArrayEquals(new byte[]{-86, 2, -78, -12, -66, -108, -124, -29, 112, -66, 34, 95, -31, 116, 32, 11}, sessionKey);
    }

    @Test
    void sapHash2Test() {
        byte[] base = {-55, -25, 98, -103, -49, 98, -55, 82, 124, 29, 52, -57, -3, 12, 58, -42, -121, 115, -63, 99, 90, 126, -108, 28, -48, -9, -19, -94, 72, 6, 99, -48, -78, -113, 35, -5, -47, -114, 63, -36, 66, -126, -32, -93, -99, -29, 111, 57, -106, -45, 126, -1, 112, 28, -83, 46, -74, -87, -118, -108, 112, 71, -112, 100, -80, -83, 20, 79, -94, 8, 111, 16, -1, -65, -36, -17, 69, -70, 120, 121, 8, 0, 1, -52, 52, 42, 94, 91, 26, 103, 115, -62, 14, 33, -72, 34, 77, -8, 98, 72, 24, 100, -17, -127, 10, -82, 46, 55, 3, -56, -127, -100, 35, 83, -99, -27, -11, -41, 73, -68, 91, 122, 38, 108, 73, 98, -125, -50, 127, 3, -109, 122, -31, -10, 22, -34, 12, 21, -1, 51, -116, -54, -1, -80, -98, -86, -69, -28, 15, 93, 95, 85, -113, -71, 127, 23, 49, -8, -9, -38, 96, -96, -20, 101, 121, -61, 62, -87, -125, 18, -61, -74, 113, 53, -90, 105, 79, -8, 35, 5, -39, -70, 92, 97, 95, -94, 84, -46, -79, -125, 69, -125, -50, -28, 45, 68, 38, -56, 53, -89, -91, -10, -56, 66, 28, 13, -93, -15, -57, -20, 78, 39, 94, -3, -14, -24, 48, -105, -82, 112, -5, -32, 0, 63, 28, 57, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0};
        byte[] sessionKey = new byte[16];

        sapHash.sap_hash(base, sessionKey);

        assertArrayEquals(new byte[]{101, 84, -94, -50, -26, 98, 105, -117, 92, 111, -59, -121, 6, 118, 40, -30}, sessionKey);
    }

    @Test
    void sapHash3Test() {
        byte[] base = {-80, -83, 20, 79, -94, 8, 111, 16, -1, -65, -36, -17, 69, -70, 120, 121, 8, 0, 1, -52, 52, 42, 94, 91, 26, 103, 115, -62, 14, 33, -72, 34, 77, -8, 98, 72, 24, 100, -17, -127, 10, -82, 46, 55, 3, -56, -127, -100, 35, 83, -99, -27, -11, -41, 73, -68, 91, 122, 38, 108, 73, 98, -125, -50, 127, 3, -109, 122, -31, -10, 22, -34, 12, 21, -1, 51, -116, -54, -1, -80, -98, -86, -69, -28, 15, 93, 95, 85, -113, -71, 127, 23, 49, -8, -9, -38, 96, -96, -20, 101, 121, -61, 62, -87, -125, 18, -61, -74, 113, 53, -90, 105, 79, -8, 35, 5, -39, -70, 92, 97, 95, -94, 84, -46, -79, -125, 69, -125, -50, -28, 45, 68, 38, -56, 53, -89, -91, -10, -56, 66, 28, 13, -93, -15, -57, -20, 78, 39, 94, -3, -14, -24, 48, -105, -82, 112, -5, -32, 0, 63, 28, 57, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0};
        byte[] sessionKey = new byte[16];

        sapHash.sap_hash(base, sessionKey);

        assertArrayEquals(new byte[]{-117, 52, -26, 79, -71, -24, -122, 95, -121, -26, 88, 64, -31, -82, 124, -115}, sessionKey);
    }

    @Test
    void sapHash4Test() {
        byte[] base = {127, 3, -109, 122, -31, -10, 22, -34, 12, 21, -1, 51, -116, -54, -1, -80, -98, -86, -69, -28, 15, 93, 95, 85, -113, -71, 127, 23, 49, -8, -9, -38, 96, -96, -20, 101, 121, -61, 62, -87, -125, 18, -61, -74, 113, 53, -90, 105, 79, -8, 35, 5, -39, -70, 92, 97, 95, -94, 84, -46, -79, -125, 69, -125, -50, -28, 45, 68, 38, -56, 53, -89, -91, -10, -56, 66, 28, 13, -93, -15, -57, -20, 78, 39, 94, -3, -14, -24, 48, -105, -82, 112, -5, -32, 0, 63, 28, 57, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0};
        byte[] sessionKey = new byte[16];

        sapHash.sap_hash(base, sessionKey);

        assertArrayEquals(new byte[]{96, -100, -11, 30, -14, -30, 1, 21, -16, 47, 22, 99, -4, -69, 98, 102}, sessionKey);
    }

    @Test
    void sapHash5Test() {
        byte[] base = {-50, -28, 45, 68, 38, -56, 53, -89, -91, -10, -56, 66, 28, 13, -93, -15, -57, -20, 78, 39, 94, -3, -14, -24, 48, -105, -82, 112, -5, -32, 0, 63, 28, 57, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0};
        byte[] sessionKey = new byte[16];

        sapHash.sap_hash(base, sessionKey);

        assertArrayEquals(new byte[]{-63, 122, 118, 9, -104, -89, -33, 12, 5, 112, -32, 114, -19, -111, -19, -71}, sessionKey);
    }

    @Test
    void sapHash6Test() {
        byte[] base = {-6, -100, -83, 77, 75, 104, 38, -116, 127, -13, -120, -103, -34, -110, 46, -107, 30, 0, 1, 5, 3, -28, -128, -93, 61, 81, -84, 99, -46, -80, 71, -35, 59, -48, 79, 97, -120, 78, -81, -128, 8, 68, -86, -108, 76, -101, 106, 96, -108, -112, -35, -38, 79, -43, 55, -15, 93, 49, 56, -119, -23, -40, -54, 30, 95, -48, -73, 63, 18, -80, -70, -70, -106, 2, 78, -77, -82, -76, -122, 45, 86, 2, 120, -11, -61, 4, -9, 20, 31, 4, 68, 1, -69, -54, 94, -101, 70, -108, -43, -44, -43, -94, 64, -13, 66, -1, -61, 22, -107, -32, -10, 53, -87, 54, 122, -33, -100, 98, -21, 14, 73, -94, -2, 15, 15, 59, -28, -69, 112, 24, 108, -38, -56, -119, -122, 26, -87, -59, 76, -80, 126, 19, -111, -74, 33, 0, 1, -52, 52, 42, 94, 91, 26, 103, 115, -62, 14, 33, -72, 34, 77, -8, 98, 72, 24, 100, -17, -127, 10, -82, 46, 55, 3, -56, -127, -100, 35, 83, -99, -27, -11, -41, 73, -68, 91, 122, 38, 108, 73, 98, -125, -50, 127, 3, -109, 122, -31, -10, 22, -34, 12, 21, -1, 51, -116, -54, -1, -80, -98, -86, -69, -28, 15, 93, 95, 85, -113, -71, 127, 23, 49, -8, -9, -38, 96, -96, -20, 101, 121, -61, 62, -87, -125, 18, -61, -74, 113, 53, -90, 105, 79, -8, 35, 5, -39, -70, 92, 97, 95, -94, 84, -46, -79, -125, 69, -125, -50, -28, 45, 68, 38, -56, 53, -89, -91, -10, -56, 66, 28, 13, -93, -15, -57, -20, 78, 39, 94, -3, -14, -24, 48, -105, -82, 112, -5, -32, 0, 63, 28, 57, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0};
        byte[] sessionKey = new byte[16];

        sapHash.sap_hash(base, sessionKey);

        assertArrayEquals(new byte[]{-23, 122, -22, 112, 25, -43, -4, 76, -9, -104, -116, -22, 119, 113, -86, 87}, sessionKey);
    }
}
