package org.freenesis.airplay.jap2lib;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

class OmgHaxTest {

    private final OmgHax omgHax = new OmgHax();

    @Test
    void generateSessionKey() {
        byte[] messageIn = {70, 80, 76, 89, 3, 1, 3, 0, 0, 0, 0, -104, 0, -113, 26, -100, -40, -92, -10, 52, 109, 20, 120, 6, -62, -67, -118, 75, -47, -71, -109, -45, -61, 106, -95, 1, 36, -104, -7, 78, -1, -13, 70, 123, -49, 27, 49, -104, 98, 92, -94, 69, -114, 62, -48, 30, -35, 53, -25, 41, 53, 125, -7, 75, -128, -51, 10, -50, 35, 84, -42, -116, -29, 127, 94, 24, -16, -49, -46, 109, 65, 103, 21, 63, -64, -76, 54, 35, 22, 111, 8, -58, 111, -45, 1, 56, 14, -80, -98, -97, -115, -24, 59, -46, -82, -57, -92, 1, -15, -5, -67, -13, 46, 10, -43, 81, -24, 121, 63, -25, -63, 25, 35, 51, -103, -91, 53, 76, -59, 67, 7, 30, -68, -50, -32, -84, -123, 34, -82, 27, -85, 51, -44, 65, -60, 120, -11, 99, -50, -3, 66, 117, -5, 85, 90, 58, -29, 58, -40, -71, -7, -108, -7, -75};
        byte[] sessionKey = new byte[16];

        omgHax.generate_session_key(OmgHaxConst.default_sap, messageIn, sessionKey);

        assertArrayEquals(new byte[]{39, 110, -67, 89, -58, 116, 70, 37, 101, -9, -9, -68, -58, 68, 4, 50}, sessionKey);
    }

    @Test
    void decryptMessage1Text() {
        byte[] messageIn = {70, 80, 76, 89, 3, 1, 3, 0, 0, 0, 0, -104, 0, -113, 26, -100, -40, -92, -10, 52, 109, 20, 120, 6, -62, -67, -118, 75, -47, -71, -109, -45, -61, 106, -95, 1, 36, -104, -7, 78, -1, -13, 70, 123, -49, 27, 49, -104, 98, 92, -94, 69, -114, 62, -48, 30, -35, 53, -25, 41, 53, 125, -7, 75, -128, -51, 10, -50, 35, 84, -42, -116, -29, 127, 94, 24, -16, -49, -46, 109, 65, 103, 21, 63, -64, -76, 54, 35, 22, 111, 8, -58, 111, -45, 1, 56, 14, -80, -98, -97, -115, -24, 59, -46, -82, -57, -92, 1, -15, -5, -67, -13, 46, 10, -43, 81, -24, 121, 63, -25, -63, 25, 35, 51, -103, -91, 53, 76, -59, 67, 7, 30, -68, -50, -32, -84, -123, 34, -82, 27, -85, 51, -44, 65, -60, 120, -11, 99, -50, -3, 66, 117, -5, 85, 90, 58, -29, 58, -40, -71, -7, -108, -7, -75};
        byte[] decryptedMessage = new byte[128];
        omgHax.decryptMessage(messageIn, decryptedMessage);

        assertArrayEquals(new byte[]{0, 1, 30, -125, 126, 116, 70, 103, -73, -27, 121, -8, 114, 3, 1, -121, -45, -63, 15, 43, -41, 99, -50, 92, -84, 43, 121, -76, 55, -51, -97, 5, -32, -7, -68, 100, 108, -14, 29, 86, 64, -60, 37, -93, -125, -111, 113, -55, -25, 98, -103, -49, 98, -55, 82, 124, 29, 52, -57, -3, 12, 58, -42, -121, 115, -63, 99, 90, 126, -108, 28, -48, -9, -19, -94, 72, 6, 99, -48, -78, -113, 35, -5, -47, -114, 63, -36, 66, -126, -32, -93, -99, -29, 111, 57, -106, -45, 126, -1, 112, 28, -83, 46, -74, -87, -118, -108, 112, 71, -112, 100, -80, -83, 20, 79, -94, 8, 111, 16, -1, -65, -36, -17, 69, -70, 120, 121, 8}, decryptedMessage);
    }

    @Test
    void decryptMessage2Text() {
        byte[] messageIn = {70, 80, 76, 89, 3, 1, 3, 0, 0, 0, 0, -104, 3, -113, 26, -100, 55, -15, -52, -74, -24, 121, 37, 74, 109, -82, -109, 93, -65, -76, 89, -16, 27, -41, -45, -99, 109, 45, -95, 44, -68, 21, -24, -93, -78, 41, 38, -104, 80, 43, 96, 123, -90, 127, -125, -44, -100, 0, -48, 35, 38, 66, 15, 60, -37, -8, -48, -84, 61, -95, 96, 25, -53, 56, 112, -10, -6, -73, -82, 81, -50, -33, -62, -115, -90, 6, 83, 59, 4, -13, -114, 84, 4, 32, 64, -64, -104, -42, 84, -57, -37, 14, 100, -58, 20, 82, -85, 70, 125, 115, 106, -57, 21, -43, -11, 54, -61, -3, -66, 104, 69, 54, 92, 100, -21, -120, -10, 29, 70, 92, 53, 105, 28, 40, -128, 37, 56, -37, 47, -53, -47, 32, 40, -125, 12, 117, -27, 80, 12, -78, -102, 101, -107, 93, -111, 47, -41, -94, -124, -86, 72, 63, 20, -114};
        byte[] decryptedMessage = new byte[128];
        omgHax.decryptMessage(messageIn, decryptedMessage);

        assertArrayEquals(new byte[]{0, 1, -99, -23, 114, -121, 82, -36, 7, -125, 74, 78, -43, 47, -83, 116, 45, -85, -25, -76, -92, -5, -13, 39, -55, -31, 32, 79, 121, -67, 107, 89, -15, -126, 97, -61, 26, -76, 49, 115, -83, 61, 110, -70, -91, 29, -90, 21, -118, -25, -51, -74, 26, 87, -74, -78, -30, 43, -48, -73, -69, 74, -63, 56, 74, -46, -50, 38, 6, -11, 4, -87, 28, 55, 1, -86, -53, -13, 112, -70, -71, -21, 52, -93, 66, -64, 27, 51, -52, -117, -73, -76, 90, 33, 83, -33, 90, -38, -35, 43, 29, -95, -67, 106, -119, -115, 23, -103, 67, 116, 22, 38, 5, 79, -37, -119, 114, -8, 10, 116, 12, -20, 25, 82, -38, -31, 97, -78}, decryptedMessage);
    }

    @Test
    void generateKeySchedule1Test() {
        int[][] keySchedule = new int[11][4];

        omgHax.generate_key_schedule(OmgHaxConst.initial_session_key, keySchedule);

        assertArrayEquals(new int[]{-665135092, 2094846048, 1974007022, -129415421}, keySchedule[0]);
        assertArrayEquals(new int[]{1657169001, 505066505, 1806844135, -1812264988}, keySchedule[1]);
        assertArrayEquals(new int[]{-168858664, -336207919, -2142789834, 331126994}, keySchedule[2]);
        assertArrayEquals(new int[]{923012806, -588132073, 1555451425, 1326110451}, keySchedule[3]);
        assertArrayEquals(new int[]{-1487983013, 2076114764, 654881133, 1744988062}, keySchedule[4]);
        assertArrayEquals(new int[]{317585804, 1767048896, 1314633645, 643420211}, keySchedule[5]);
        assertArrayEquals(new int[]{1119227396, 736430276, 1706999657, 1139240794}, keySchedule[6]);
        assertArrayEquals(new int[]{1815178368, 1205101636, 577428269, 1636676727}, keySchedule[7]);
        assertArrayEquals(new int[]{-1671784215, -611386195, -102488192, -1737911305}, keySchedule[8]);
        assertArrayEquals(new int[]{1548300438, -2016949189, 2116283323, -431327156}, keySchedule[9]);
        assertArrayEquals(new int[]{-488839655, 1696279074, 456704409, -42812971}, keySchedule[10]);
    }

    @Test
    void generateKeySchedule2Test() {
        byte[] keyMaterial = {39, 110, -67, 89, -58, 116, 70, 37, 101, -9, -9, -68, -58, 68, 4, 50};
        int[][] keySchedule = new int[11][4];

        omgHax.generate_key_schedule(keyMaterial, keySchedule);

        assertArrayEquals(new int[]{940862199, -1572417363, -1448575987, -1679986221}, keySchedule[0]);
        assertArrayEquals(new int[]{571422622, -2142640333, 702651198, -1304630547}, keySchedule[1]);
        assertArrayEquals(new int[]{-894254476, 1257973063, 1662697081, -786017132}, keySchedule[2]);
        assertArrayEquals(new int[]{-2081822342, -921514947, -1442287036, 2066622160}, keySchedule[3]);
        assertArrayEquals(new int[]{-105003103, 816778140, -1700300328, -511090936}, keySchedule[4]);
        assertArrayEquals(new int[]{-118041420, -933634264, 1392420592, -1283982856}, keySchedule[5]);
        assertArrayEquals(new int[]{265498950, -947196306, -1787541346, 637776230}, keySchedule[6]);
        assertArrayEquals(new int[]{726154226, -322775652, 2042010882, 1605708900}, keySchedule[7]);
        assertArrayEquals(new int[]{1995586036, -1708069784, -477728406, -1137484530}, keySchedule[8]);
        assertArrayEquals(new int[]{84681731, -1623406485, 2092611841, -1064705009}, keySchedule[9]);
        assertArrayEquals(new int[]{-787235461, 1311733008, 848677905, -233035746}, keySchedule[10]);
    }

    @Test
    void cycleTest() {
        byte[] blockIn = {-3, -95, -97, 118, 127, 54, 34, -29, -72, 30, 20, -60, -43, -124, -13, 21};
        int[][] keySchedule = {{940862199, -1572417363, -1448575987, -1679986221},
                {571422622, -2142640333, 702651198, -1304630547},
                {-894254476, 1257973063, 1662697081, -786017132},
                {-2081822342, -921514947, -1442287036, 2066622160},
                {-105003103, 816778140, -1700300328, -511090936},
                {-118041420, -933634264, 1392420592, -1283982856},
                {265498950, -947196306, -1787541346, 637776230},
                {726154226, -322775652, 2042010882, 1605708900},
                {1995586036, -1708069784, -477728406, -1137484530},
                {84681731, -1623406485, 2092611841, -1064705009},
                {-787235461, 1311733008, 848677905, -233035746}};

        omgHax.cycle(blockIn, keySchedule);

        assertArrayEquals(new byte[]{-104, -5, -75, -79, 27, 76, -72, -54, 72, -15, 9, 99, -29, 29, 36, 124}, blockIn);
    }
}